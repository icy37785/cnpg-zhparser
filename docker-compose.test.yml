# docker-compose.test.yml
services:
  postgres:
    build:
      context: .
      # 我们仍然只测试 builder 阶段，因为它有启动脚本
      target: builder
      args:
        PG_MAJOR: 17
    environment:
      POSTGRES_PASSWORD: "testpass"
      POSTGRES_USER: "testuser"
      POSTGRES_DB: "testdb"
    # 这是关键的修复！
    # 我们覆盖了默认的启动命令，加入了我们需要的配置参数
    command:
      - "postgres"
      - "-c"
      - "shared_preload_libraries=zhparser"
      - "-c"
      - "zhparser.dict_path=/usr/local/etc"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - test-net

  test:
    image: postgres:17-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGHOST: postgres
      PGDATABASE: testdb
      PGUSER: testuser
      PGPASSWORD: "testpass"
    # 测试脚本也变得更简单了，因为配置在启动时就已经生效
    command: |
      sh -c "
        echo '✅ Connection successful, server started with zhparser preloaded.'
        sleep 2

        echo '=== Testing Extension Creation ==='
        psql -c 'CREATE EXTENSION IF NOT EXISTS zhparser;'

        echo '✅ Extension created!'
        
        echo '=== Testing Text Search Configuration ==='
        psql -c 'CREATE TEXT SEARCH CONFIGURATION chinese_zh (PARSER = zhparser);'

        echo '✅ Text search configuration created!'
        
        echo '=== Testing Chinese Word Segmentation (with dictionary) ==='
        # 这次应该能看到正确的分词结果了！
        psql -c \"SELECT to_tsvector('chinese_zh', 'PostgreSQL中文全文搜索测试');\"
        
        echo '🎉 All tests passed successfully!'
      "
    networks:
      - test-net

networks:
  test-net:
    driver: bridge